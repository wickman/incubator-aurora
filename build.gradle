/*
 * Copyright 2013 Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'about'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'java'
apply plugin: 'license'
apply plugin: 'maven-publish'
apply plugin: 'project-report'
apply plugin: 'versions'

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.4'
    classpath 'com.github.goldin.plugins.gradle:about:0.3.1'
    classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
  }
}

buildDir = 'dist'
def generatedDir = "$buildDir/generated-src"
def generatedJavaDir = "$generatedDir/gen-java"
def generatedJSDir = "$generatedDir/gen-js"

def thriftVersion = '0.9.1'

compileJava {
  sourceCompatibility = 1.7
  targetCompatibility = 1.7
}

tasks.matching { it instanceof Compile && it.getName() != 'compileGeneratedJava' }.all {
  options.compilerArgs << '-Werror'
  options.compilerArgs << '-Xlint:all'
  // Don't fail for annotations not claimed by annotation processors.
  options.compilerArgs << '-Xlint:-processing'
  // Don't fail for serialVersionUID warnings.
  options.compilerArgs << '-Xlint:-serial'
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.11'
}

task sourceJar(type: Jar) {
  from sourceSets.main.allJava
}

group 'org.apache.aurora'
version = file('.auroraversion').text.trim().toUpperCase()

publishing {
  publications {
    maven(MavenPublication) {
      artifactId 'aurora-scheduler'
      from components.java

      artifact sourceJar {
        classifier "sources"
      }
    }
  }
  if (project.hasProperty('internalMavenUrl')) {
    repositories {
      maven {
        credentials {
          username = internalMavenUser
          password = internalMavenPass
        }
        url internalMavenUrl
      }
    }
  }
}

repositories {
  mavenCentral()
  maven {
    url 'http://maven.twttr.com/'
  }
}

sourceSets {
  test {
    resources {
      srcDir 'src/main/resources'
      srcDir 'src/test/resources'
    }
  }
  generated {
    java.srcDirs = [generatedDir]
  }
  main {
    compileClasspath += sourceSets.generated.output
    resources {
      srcDir '3rdparty/javascript'
      srcDir generatedJSDir
    }
  }
  test {
    compileClasspath += sourceSets.generated.output
    runtimeClasspath += sourceSets.generated.output
  }
}
/*  A note on libthrift: All of com.twitter.common depends on libthrift 0.5.x. We depend on
    libthrift 0.9.x. There are binary incompatibilities between the two versions and resolving
    them involved forking com.twitter.common classes into Aurora to use the new libthrift API. Be
    very cautious when either upgrading libthrift or com.twitter.common dependencies!!!
 */

jar {
  dependsOn 'about'
  from sourceSets.generated.output
  manifest {
    attributes('Created-By': 'Gradle')
    attributes('Main-Class': 'org.apache.aurora.scheduler.app.SchedulerMain')
  }
}

dependencies {
  def jerseyRev = '1.17.1'
  def log4jRev = '1.2.17'
  def slf4jRev = '1.6.1'
  def junitRev = '4.11'

  def guavaDep = 'com.google.guava:guava:16.0'
  def thriftLib = "org.apache.thrift:libthrift:${thriftVersion}"

  compile 'aopalliance:aopalliance:1.0'
  compile 'com.google.code.findbugs:jsr305:2.0.1'
  compile guavaDep
  compile 'com.google.inject:guice:3.0'
  compile 'com.google.protobuf:protobuf-java:2.5.0'
  compile "com.sun.jersey:jersey-core:${jerseyRev}"
  compile "com.sun.jersey:jersey-json:${jerseyRev}"
  compile "com.sun.jersey:jersey-server:${jerseyRev}"
  compile "com.sun.jersey:jersey-servlet:${jerseyRev}"
  compile "com.sun.jersey.contribs:jersey-guice:${jerseyRev}"
  compile 'commons-lang:commons-lang:2.6'
  compile 'javax.inject:javax.inject:1'
  compile 'javax.servlet:servlet-api:2.5'
  compile "log4j:log4j:${log4jRev}"
  compile 'org.antlr:stringtemplate:3.2.1'
  compile 'org.apache.mesos:mesos:0.17.0'
  compile thriftLib
  compile 'org.apache.zookeeper:zookeeper:3.3.4'
  compile "org.slf4j:slf4j-api:${slf4jRev}"
  compile "org.slf4j:slf4j-jdk14:${slf4jRev}"
  compile 'com.twitter.common.logging:log4j:0.0.7'
  compile 'com.twitter.common.webassets:bootstrap:0.0.4'
  compile 'com.twitter.common.webassets:jquery:0.0.4'
  compile 'com.twitter.common.zookeeper.guice:client-flagged:0.0.5'
  compile 'com.twitter.common.zookeeper.guice:client:0.0.5'
  compile 'com.twitter.common.zookeeper:candidate:0.0.64'
  compile 'com.twitter.common.zookeeper:client:0.0.56'
  compile 'com.twitter.common.zookeeper:group:0.0.69'
  compile 'com.twitter.common.zookeeper:server-set:1.0.74'
  compile 'com.twitter.common.zookeeper:singleton-service:0.0.85'
  compile 'com.twitter.common:application-http:0.0.59'
  compile 'com.twitter.common:application-module-applauncher:0.0.51'
  compile 'com.twitter.common:application-module-http:0.0.62'
  compile 'com.twitter.common:application-module-lifecycle:0.0.48'
  compile 'com.twitter.common:application-module-log:0.0.56'
  compile 'com.twitter.common:application-module-stats:0.0.44'
  compile 'com.twitter.common:application:0.0.73'
  compile 'com.twitter.common:args:0.2.9'
  compile 'com.twitter.common:base:0.0.87'
  compile 'com.twitter.common:collections:0.0.74'
  compile 'com.twitter.common:dynamic-host-set:0.0.44'
  compile 'com.twitter.common:inject-timed:0.0.11'
  compile 'com.twitter.common:inject:0.0.35'
  compile 'com.twitter.common:io:0.0.53'
  compile 'com.twitter.common:jdk-logging:0.0.44'
  compile 'com.twitter.common:logging:0.0.61'
  compile 'com.twitter.common:net-http-filters:0.0.6'
  compile 'com.twitter.common:net-util:0.0.80'
  compile 'com.twitter.common:quantity:0.0.71'
  compile 'com.twitter.common:stats:0.0.91'
  compile 'com.twitter.common:testing-easymock:0.0.4'
  compile 'com.twitter.common:thrift:0.0.68'
  compile 'com.twitter.common:util-executor-service-shutdown:0.0.49'
  compile 'com.twitter.common:util-system-mocks:0.0.72'
  compile 'com.twitter.common:util-templating:0.0.25'
  compile 'com.twitter.common:util-testing:0.0.10'
  compile 'com.twitter.common:util:0.0.94'
  compile 'com.twitter.common:zookeeper-testing:0.0.45'

  testCompile "junit:junit:${junitRev}"

  generatedCompile guavaDep
  generatedCompile thriftLib

  checkstyle 'com.puppycrawl.tools:checkstyle:5.6'

  configurations.compile {
    exclude module: 'junit-dep'
    resolutionStrategy {
      failOnVersionConflict()

      def forceDepVersions = [
        // Force versions based on the dependencies we use from above
        'org.slf4j:slf4j-api' : slf4jRev,
        'log4j:log4j' : log4jRev,
        'org.apache.thrift:libthrift' : thriftVersion,
        'junit:junit' : junitRev,
        // Force versions based on inter-dependency collisions
        'org.hamcrest:hamcrest-core' : '1.3',
      ]

      force forceDepVersions.collect { dep, ver -> "$dep:$ver" }
    }
  }
}

checkstyle {
  sourceSets = [ sourceSets.main , sourceSets.test]
}

/**
 * Check if Apache Thrift is all ready installed and is the same version as we
 * depend on, otherwise compile the version in build-support. project.thrift will
 * contain the path to the thrift executable when finished
 */
task bootstrapThrift {
  project.ext.set('thrift', '')

  try {
    // Attempt to run thrift and get the version string back. if no version of thrift is available
    // execute will throw an exception, catch and set project.thrift as empty to build the local version
    def output = "thrift --version".execute().text.trim()
    if(output == "Thrift version ${thriftVersion}") {
      project.thrift = 'thrift'
    }
  } catch (IOException e) {
    project.thrift = ''
  }

  // If thrift was not found or was the wrong version build our local copy
  if (project.thrift.isEmpty()) {
    project.thrift = "build-support/thrift/thrift-${thriftVersion}/compiler/cpp/thrift"

    inputs.file file(project.thrift)
    outputs.dir file(project.thrift)
    doLast {
      exec {
        executable = 'make'
        args = ['-C', 'build-support/thrift']
      }
    }
  }
}

task generateSources(dependsOn: 'bootstrapThrift') {
  ext.inputFiles = fileTree(dir: 'src/main/thrift').matching { include '**/*.thrift' }
  ext.outputDir = file(generatedDir)
  inputs.file inputFiles
  outputs.dir outputDir
  doLast {
    outputDir.exists() || outputDir.mkdirs()
    inputFiles.each { File file ->
      exec {
        executable = project.thrift
        args = ['--gen', 'java:hashcode', '--gen', 'js', '-o', outputDir, file]
      }
    }
    // TODO(wfarner): Change codegen tool to generate for all structs in a thrift file.
    def iStructs = ['JobConfiguration',
                    'JobStats',
                    'Lock',
                    'ResourceAggregate',
                    'ScheduledTask',
                    'ServerInfo']
    iStructs.each {
      def structName = it
      exec {
        executable = 'python'
        args = ['src/main/python/apache/aurora/tools/java/thrift_wrapper_codegen.py',
                'src/main/thrift/org/apache/aurora/gen/api.thrift',
                structName,
                generatedJavaDir]
      }
    }
  }
}

compileGeneratedJava {
  dependsOn generateSources
}

compileJava.source sourceSets.main.java

tasks.withType(Test) {
  maxParallelForks = Runtime.runtime.availableProcessors()
}

ideaProject.dependsOn generateSources

idea {
  module {
    def codegenDirs = [file(generatedJavaDir), file(generatedJSDir)]

    // These directories must exist, else the plugin omits them from the
    // generated project. Since this is executed during the configuration
    // lifecycle phase, dependency tasks have not yet run and created
    // the directories themselves.
    codegenDirs.each { File codegenDir ->
      codegenDir.mkdirs()
    }

    // By default, the idea module [1] excludes are set to
    // [project.buildDir, project.file('.gradle')]
    // This has the side-effect of also excluding our generated sources [2].  Due to the way
    // directory exclusion works in idea, you can't exclude a directory and include a child of that
    // directory.  Clearing the excludes seems to have no ill side-effects, making it preferable to
    // other possible approaches.
    //
    // [1] http://www.gradle.org/docs/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
    // [2] http://issues.gradle.org/browse/GRADLE-1174
    excludeDirs = []
    sourceDirs += codegenDirs
  }
}

// Configuration parameters for the application plugin.
applicationName = 'aurora-scheduler'
mainClassName = 'org.apache.aurora.scheduler.app.SchedulerMain'

// Run a local scheduler with a local log file and fake jobs
run {
  classpath += sourceSets.generated.output
  args = [
    '-thermos_executor_path=/dev/null',
    '-gc_executor_path=/dev/null',
    '-http_port=8081',
    '-thrift_port=8082',
    '-zk_in_proc=true',
    '-zk_endpoints=localhost:0',
    '-serverset_path=/twitter/service/mesos/local/scheduler',
    '-mesos_master_address=local',
    '-cluster_name=local',
    '-log_dir=/tmp',
    '-backup_dir=/tmp',
    '-logtostderr',
    '-vlog=INFO',
    '-testing_isolated_scheduler=true',
    '-testing_log_file_path=/tmp/testing_log_file',
    '-viz_job_url_prefix=http://fake_viz_domain.com/stats?'
  ]
}

tasks.withType(nl.javadude.gradle.plugins.license.License).each { licenseTask ->
  licenseTask.setSource files("$projectDir/src/main/java", "$projectDir/src/test/java")
}

license {
  header rootProject.file('config/checkstyle/apache.header')
  strictCheck true
  skipExistingHeaders true
  ext.year = Calendar.getInstance().get(Calendar.YEAR)
}

jacocoTestReport {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
  doLast {
    println "Coverage report generated: file:///$buildDir/reports/jacoco/test/html/index.html"
  }
}

test.finalizedBy jacocoTestReport

task FlagSchemaChanges(type: Test) << {
  exec {
    executable = 'bash'
    args = ['src/test/sh/org/apache/aurora/verify_thrift_checksum.sh']
  }
}

javadoc {
  classpath += sourceSets.generated.output
}
